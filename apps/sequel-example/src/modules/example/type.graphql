type Query {
  findSequelEmployees(where: SequeEmployeeFilter): [SequelEmployee]
  fetchSequelEmployees(next: ID, limit: Int): [SequelEmployee]
  sequelEmployee(id: ID): SequelEmployee
  sequelEmployees: [SequelEmployee]

  findSequelCompanies(where: SequeCompanyFilter): [SequelCompany]
  fetchSequelCompanies(next: ID, limit: Int): [SequelCompany]
  sequelCompany(id: ID): SequelCompany
  sequelCompanies: [SequelCompany]
}

type Mutation {
  createSequelEmployee(request: SequelEmployeeRequest): SequelEmployee
  updateSequelEmployee(request: SequelEmployeeRequest): SequelEmployee
  deleteSequelEmployee(request: SequelEmployeeRequest): SequelEmployee
  createSequelCompany(request: SequelCompanyRequest): SequelCompany
  updateSequelCompany(request: SequelCompanyRequest): SequelCompany
  deleteSequelCompany(request: SequelCompanyRequest): SequelCompany
}

type SequelCompany @model(name: "company") {
  id: ID! @primary
  name: String
  phrase: String
  owner: SequelEmployee @hasOne(foreignKey: "owner")
  employees: [SequelEmployee] @hasMany(foreignKey: "employerId")
  status: SequelCompanyStatus
  info: ExernalInfo @field(type: ID)
}

type SequelEmployee @model(name: "employee") {
  id: ID! @primary
  firstName: String
  lastName: String
  address: String @default(value: "")
  company: SequelCompany @belongsTo(foreignKey: employerId)
  # supervisor: SequelEmployee @belongsTo(foreignKey: supervisorId)
  subordinates: [SequelEmployee] @hasMany(foreignKey: "supervisorId")
}

type ExernalInfo {
  id: ID
}

enum SequelCompanyStatus {
  INVALID
  CONFIRM
  PROVEN
}

input SequelCompanyRequest {
  id: ID
  name: String!
  phrase: String
  status: SequelCompanyStatus
}

input SequelEmployeeRequest {
  id: ID
  firstName: String!
  lastName: String!
  address: String
  owner: ID
  employerId: ID
}

input SequeCompanyFilter {
  id: ID
  ids: [ID]
  name: String
}

input SequeEmployeeFilter {
  id: ID
  ids: [ID]
  firstName: String
  lastName: String
}